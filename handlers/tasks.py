import logging
import types

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, ForceReply, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, \
    ReplyKeyboardMarkup, KeyboardButton
from sqlalchemy import select, delete
from sqlalchemy.exc import SQLAlchemyError

from bot import bot
from data.database import session_factory
from data.models import User, Task, Link


router = Router()


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∑–∞–¥–∞—á–∏
class TaskState(StatesGroup):
    waiting_for_task = State()

@router.callback_query(F.data == "add_task")
async def ask_for_task(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏"""
    await callback.message.answer("‚úè –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    await state.set_state(TaskState.waiting_for_task)

@router.message(TaskState.waiting_for_task)
async def add_task_handler(message: Message, state: FSMContext):
    async with session_factory() as session:
        # Extract task description
        new_task_text = message.text.strip()
        if not new_task_text:
            await message.answer(escape_md("‚ö† –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!"))
            return
        # Add task to the database
        user_id = message.from_user.id
        result = await session.execute(select(User).where(User.user_id == user_id))
        user = result.scalars().first()
        if not user:
            await message.answer(escape_md("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!"))
            return
        new_task = Task(user_id=user.user_id, task_text=new_task_text)
        session.add(new_task)
        await session.commit()
        await message.answer(escape_md("–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!"), reply_markup=get_main_keyboard())
        await state.clear()  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è


@router.message(F.text.startswith('/edittask'))
async def edit_task_handler(message: Message):
    async with session_factory() as session:
        async with session.begin():
            try:
                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –∑–∞–¥–∞—á–∏
                args = message.text[len("/edittask "):].strip()
                if not args.isdigit():
                    await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /edittask <ID –∑–∞–¥–∞—á–∏>, –≥–¥–µ ID –∑–∞–¥–∞—á–∏ ‚Äî —á–∏—Å–ª–æ.")
                    return

                task_id = int(args)
                user_id = message.from_user.id

                # –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                result = await session.execute(
                    select(Task).where(Task.task_id == task_id, Task.user_id == user_id)
                )
                task = result.scalars().first()

                if not task:
                    await message.reply("–ó–∞–¥–∞—á–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –æ–Ω–∞ –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç.")
                    return

                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π ForceReply, –ø–æ–¥—Å—Ç–∞–≤–ª—è—è —Å—Ç–∞—Ä–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
                await message.reply(
                    f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ #{task_id}:\n"
                    f"–°—Ç–∞—Ä—ã–π —Ç–µ–∫—Å—Ç: \"{task.task_text}\"\n\n"
                    f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:",
                    reply_markup = ForceReply(input_field_placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏...")
                )

            except SQLAlchemyError as e:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                print(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")


@router.message(lambda message: message.reply_to_message and "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏" in message.reply_to_message.text)
async def save_edited_task_handler(message: Message):
    async with session_factory() as session:
        async with session.begin():
            try:
                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –∑–∞–¥–∞—á–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                original_text = message.reply_to_message.text
                task_id_start = original_text.find("#") + 1
                task_id_end = original_text.find(":", task_id_start)
                task_id_str = original_text[task_id_start:task_id_end].strip()

                if not task_id_str.isdigit():
                    await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ID –∑–∞–¥–∞—á–∏.")
                    return

                task_id = int(task_id_str)
                user_id = message.from_user.id

                # –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                result = await session.execute(
                    select(Task).where(Task.task_id == task_id, Task.user_id == user_id)
                )
                task = result.scalars().first()

                if not task:
                    await message.reply("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –æ–Ω–∞ –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç.")
                    return

                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
                new_task_text = message.text.strip()
                if not new_task_text:
                    await message.reply("–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
                    return

                task.task_text = new_task_text
                await session.commit()
                await message.reply(f"–ó–∞–¥–∞—á–∞ #{task_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {new_task_text}")

            except SQLAlchemyError as e:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                print(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

def escape_md(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown.
    """
    escape_chars = r"_*[]()~`>#+-=|{}.!"
    return "".join(f"\\{char}" if char in escape_chars else char for char in text)

async def split_message(text, limit=4000):
    parts, current = [], ""
    for line in text.split("\n"):
        if len(current) + len(line) + 1 > limit:
            parts.append(current)
            current = line
        else:
            current += "\n" + line if current else line
    if current:
        parts.append(current)
    return parts

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∑–∞–¥–∞—á–∞–º–∏
user_last_messages = {}

def get_main_keyboard():
    inline_buttons = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="add_task")],
        [InlineKeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏", callback_data="show_tasks")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=inline_buttons)
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
def get_task_buttons(tasks):
    inline_buttons = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    for i, task in enumerate(tasks):
        button = InlineKeyboardButton(
            text=f"–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É {i+1}",
            callback_data=f'delete_task {task.task_id}')
        inline_buttons.append([button])

    keyboard = InlineKeyboardMarkup(inline_keyboard=inline_buttons)
    return keyboard


@router.callback_query(F.data.startswith('remove_keyboard'))
async def remove_keyboard(callback: CallbackQuery):
    await callback.message.edit_text('–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–¥–∞–ª–µ–Ω–∞', reply_markup=None)
    await callback.answer()

@router.callback_query(F.data.startswith('show_tasks'))
async def get_task_list_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    async with session_factory() as session:
        user_id = callback.from_user.id
        stmt = select(Task).where(Task.user_id == user_id)
        result = await session.execute(stmt)
        tasks = result.scalars().all()

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if user_id in user_last_messages:
            for msg_id in user_last_messages[user_id]:
                try:
                    await callback.message.bot.delete_message(chat_id=user_id, message_id=msg_id)
                except Exception:
                    pass  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É

                # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_last_messages[user_id] = []

        if not tasks:
            await callback.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á", show_alert=False)
            new_msg = await callback.message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=get_main_keyboard())
            user_last_messages[user_id] = [new_msg.message_id]

            return
        task_lines = [
            f"*{i}* {escape_md(task.created_at.strftime('%d.%m.%Y'))} {escape_md(task.task_text)}"
            for i, task in enumerate(tasks, start=1)
        ]
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –Ω–∞ —á–∞—Å—Ç–∏
        task_parts = await split_message("\n".join(task_lines))

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏
        start_idx = 0
        for part in task_parts:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –≤—Ö–æ–¥—è—Ç –≤ —ç—Ç–æ—Ç –∫—É—Å–æ–∫ —Ç–µ–∫—Å—Ç–∞
            num_lines = part.count("\n") + 1  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –≤ —ç—Ç–æ–π —á–∞—Å—Ç–∏
            tasks_in_part = tasks[start_idx:start_idx + num_lines]  # –í—ã–±–∏—Ä–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏
            keyboard = get_task_buttons(tasks_in_part)  # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–∏—Ö –∑–∞–¥–∞—á

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–∞—á–∞–º–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            new_msg = await callback.message.answer(f"–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n{part}", reply_markup=keyboard, parse_mode="MarkdownV2")
            start_idx += num_lines  # –°–º–µ—â–∞–µ–º –∏–Ω–¥–µ–∫—Å –Ω–∞—á–∞–ª–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–ª–æ–∫–∞

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        user_last_messages[user_id] = [new_msg.message_id]
        await callback.message.answer('–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=get_main_keyboard())


@router.callback_query(F.data.startswith("delete_task"))
async def delete_task_handler(callback: CallbackQuery, state: FSMContext):
    task_id = int(callback.data.split()[1])  # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–¥–∞—á–∏ –∏–∑ callback_data
    user_id = callback.from_user.id

    async with session_factory() as session:
        stmt = select(Task).where(Task.task_id == task_id, Task.user_id == user_id)
        result = await session.execute(stmt)
        task = result.scalar()

        if task:
            await session.delete(task)
            await session.commit()
            await callback.answer("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!", show_alert=False)
            await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–∞–º–∏
        else:
            await callback.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.", show_alert=False)

